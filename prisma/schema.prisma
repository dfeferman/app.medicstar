// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Shop {
  id             Int              @id @default(autoincrement())
  domain         String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  jobs           Job[]
  processes      Process[]
  settings       Setting[]
}
model Job {
  id            Int @id @default(autoincrement())
  status        Status
  retryCount    Int                 @default(0)
  logMessage    String?
  data          Json @default("{}")
  processes     Process[]
  type          JobType
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  shopId        Int
  shop          Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([status], name: "JobStatusIndex")
  @@index([createdAt], name: "JobCreatedAtIndex")
}

model Process {
  id          Int @id @default(autoincrement())
  status      Status
  type        ProcessType
  retryCount  Int                 @default(0)
  logMessage  String?
  data        Json @default("{}")
  jobId       Int
  job         Job @relation(fields: [jobId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  shopId      Int
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([status], name: "ProcessStatusIndex")
  @@index([createdAt], name: "ProcessCreatedAtIndex")
}

model Setting {
  id                               Int       @id @default(autoincrement())
  shopId                           Int
  shop                             Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isAutoSyncEnabled                Boolean   @default(true)
  isStopAllPendingTasks            Boolean   @default(false)
  isForceSyncEnabled               Boolean   @default(false)
  jobType                          JobType
  createdAt                        DateTime @default(now())
  updatedAt                        DateTime @updatedAt

  @@unique([shopId, jobType], name: "SettingShopIdJobTypeUnique")
  @@index([shopId], name: "SettingShopIdIndex")
  @@index([isAutoSyncEnabled], name: "SettingIsAutoSyncEnabledIndex")
  @@index([isStopAllPendingTasks], name: "SettingIsStopAllPendingTasksIndex")
  @@index([isForceSyncEnabled], name: "SettingIsForceSyncEnabledIndex")
}

enum Status {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ProcessType {
  DOWNLOAD_FILE
  PARSE_FILE
  UPDATE_VARIANTS
  UPDATE_TRACKING_NUMBERS
  FINISH
}

enum JobType {
  UPDATE_VARIANTS
  UPDATE_TRACKING_NUMBERS
}
